["freezed:freezed on lib/global_states/global_state.dart",["An error `FormatterException` occurred while formatting the generated source for\n  `package:stace_x_providers/global_states/global_state.dart`\nwhich was output to\n  `lib/global_states/global_state.freezed.dart`.\nThis may indicate an issue in the generator, the input source code, or in the\nsource formatter.","Could not format because the source could not be parsed:\n\nline 113, column 215 of .: A function body must be provided.\n    ╷\n113 │ @JsonKey(defaultValue: false) @override  final bool* isForegroundServiceRunning;@JsonKey(defaultValue: false) @override  final bool* isWantStopForegroundService;@JsonKey(defaultValue: false) @override  final bool* isWantStartForegroundService;\n    │                                                                                                                                                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ╵\nline 96, column 8 of .: Expected to find ')'.\n   ╷\n96 │ as bool*,isWantStopForegroundService: isWantStopForegroundService == freezed ? _value.isWantStopForegroundService : isWantStopForegroundService // ignore: cast_nullable_to_non_nullable\n   │        ^\n   ╵\nline 113, column 54 of .: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.\n    ╷\n113 │ @JsonKey(defaultValue: false) @override  final bool* isForegroundServiceRunning;@JsonKey(defaultValue: false) @override  final bool* isWantStopForegroundService;@JsonKey(defaultValue: false) @override  final bool* isWantStartForegroundService;\n    │                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ╵\nline 113, column 52 of .: Operator declarations must be preceded by the keyword 'operator'.\n    ╷\n113 │ @JsonKey(defaultValue: false) @override  final bool* isForegroundServiceRunning;@JsonKey(defaultValue: false) @override  final bool* isWantStopForegroundService;@JsonKey(defaultValue: false) @override  final bool* isWantStartForegroundService;\n    │                                                    ^\n    ╵\nline 31, column 155 of .: Expected to find ';'.\n   ╷\n31 │  bool* get isForegroundServiceRunning => throw _privateConstructorUsedError; bool* get isWantStopForegroundService => throw _privateConstructorUsedError; bool* get isWantStartForegroundService => throw _privateConstructorUsedError;\n   │                                                                                                                                                           ^^^^\n   ╵\nline 147, column 98 of .: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.\n    ╷\n147 │ @override  bool* get isForegroundServiceRunning => throw _privateConstructorUsedError;@override  bool* get isWantStopForegroundService => throw _privateConstructorUsedError;@override  bool* get isWantStartForegroundService => throw _privateConstructorUsedError;\n    │                                                                                                  ^^^^\n    ╵\nline 19, column 25 of .: Expected to find '}'.\n   ╷\n19 │ _GlobalState call({ bool* isForegroundServiceRunning = false,  bool* isWantStopForegroundService = false,  bool* isWantStartForegroundService = false}) {\n   │                         ^\n   ╵\nline 142, column 31 of .: Expected to find '}'.\n    ╷\n142 │    factory _GlobalState({ bool* isForegroundServiceRunning,  bool* isWantStopForegroundService,  bool* isWantStartForegroundService}) = _$_GlobalState;\n    │                               ^\n    ╵\nline 31, column 6 of .: Methods must have an explicit list of parameters.\n   ╷\n31 │  bool* get isForegroundServiceRunning => throw _privateConstructorUsedError; bool* get isWantStopForegroundService => throw _privateConstructorUsedError; bool* get isWantStartForegroundService => throw _privateConstructorUsedError;\n   │      ^\n   ╵\nline 31, column 159 of .: Methods must have an explicit list of parameters.\n   ╷\n31 │  bool* get isForegroundServiceRunning => throw _privateConstructorUsedError; bool* get isWantStopForegroundService => throw _privateConstructorUsedError; bool* get isWantStartForegroundService => throw _privateConstructorUsedError;\n   │                                                                                                                                                               ^\n   ╵\n(41 more errors...)","#0      DartFormatter.formatSource (package:dart_style/src/dart_formatter.dart:142:7)\n#1      DartFormatter.format (package:dart_style/src/dart_formatter.dart:71:12)\n#2      _Builder._generateForLibrary (package:source_gen/src/builder.dart:152:36)\n<asynchronous suspension>\n#3      _Builder.build (package:source_gen/src/builder.dart:82:5)\n<asynchronous suspension>\n#4      runBuilder.buildForInput (package:build/src/generate/run_builder.dart:52:7)\n<asynchronous suspension>\n#5      Future.wait.<anonymous closure> (dart:async/future.dart)\n<asynchronous suspension>\n"]]